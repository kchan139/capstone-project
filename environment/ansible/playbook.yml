---
- name: Provision The Server
  hosts: all
  become: true
  gather_facts: true

  vars_files:
    - vars/secrets.yml

  pre_tasks:
    - name: Stop and mask automatic update services
      ansible.builtin.systemd:
        name: "{{ item }}"
        state: stopped
        masked: yes
      loop:
        - unattended-upgrades
        - apt-daily.service
        - apt-daily.timer
        - apt-daily-upgrade.service
        - apt-daily-upgrade.timer
      ignore_errors: true

    - name: Wait a moment for processes to fully stop
      ansible.builtin.pause:
        seconds: 5

    - name: Remove any stale lock files
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - /var/lib/dpkg/lock
        - /var/lib/dpkg/lock-frontend
        - /var/cache/apt/archives/lock
      ignore_errors: true

  tasks:
    - name: Update apt cache
      ansible.builtin.apt:
        update_cache: yes
        cache_valid_time: 3600
        lock_timeout: 300
      register: apt_update
      retries: 3
      delay: 10
      until: apt_update is succeeded

    - name: Install prerequisites
      ansible.builtin.apt:
        name:
          - software-properties-common
          - apt-transport-https
          - ca-certificates
          - lsb-release
          - net-tools
          - neofetch
          - gnupg
          - make
          - btop
          - curl
          - tree
          - bat
        state: present
        lock_timeout: 300
      register: apt_prereqs
      retries: 3
      delay: 10
      until: apt_prereqs is succeeded

    - name: Set timezone to Asia/Ho_Chi_Minh
      ansible.builtin.timezone:
        name: Asia/Ho_Chi_Minh

    - name: Symlink batcat to cat
      ansible.builtin.file:
        src: /usr/bin/batcat
        dest: /usr/local/bin/bat
        state: link
      when: ansible_facts['distribution'] == 'Ubuntu'

    - name: Create non-root user {{ user1 }}
      ansible.builtin.user:
        name: "{{ user1 }}"
        state: present
        shell: /bin/bash
        create_home: yes
        groups: sudo
        append: yes
        password: "{{ user1_password | password_hash('sha512') }}"

    - name: Create non-root user {{ user2 }}
      ansible.builtin.user:
        name: "{{ user2 }}"
        state: present
        shell: /bin/bash
        create_home: yes
        groups: sudo
        append: yes
        password: "{{ user2_password | password_hash('sha512') }}"

    # --- FIREWALL --- #
    - name: Set UFW default incoming policy to deny
      community.general.ufw:
        direction: incoming
        policy: deny

    - name: Set UFW default outgoing policy to allow
      community.general.ufw:
        direction: outgoing
        policy: allow

    - name: Limit SSH on custom port
      community.general.ufw:
        rule: limit
        port: "{{ ssh_port }}"
        proto: tcp

    - name: Enable UFW
      community.general.ufw:
        state: enabled

    # --- SSH CONFIG --- #
    - name: Stop and disable ssh.socket
      ansible.builtin.systemd:
        name: ssh.socket
        state: stopped
        enabled: no

    - name: Create .ssh directory for {{ user1 }}
      ansible.builtin.file:
        path: /home/{{ user1 }}/.ssh
        state: directory
        owner: "{{ user1 }}"
        group: "{{ user1 }}"
        mode: "0700"

    - name: Copy root's authorized_keys to {{ user1 }} user
      ansible.builtin.copy:
        src: /root/.ssh/authorized_keys
        dest: /home/{{ user1 }}/.ssh/authorized_keys
        owner: "{{ user1 }}"
        group: "{{ user1 }}"
        mode: "0600"
        remote_src: yes

    - name: Create .ssh directory for {{ user2 }}
      ansible.builtin.file:
        path: /home/{{ user2 }}/.ssh
        state: directory
        owner: "{{ user2 }}"
        group: "{{ user2 }}"
        mode: "0700"

    - name: Copy root's authorized_keys to {{ user2 }} user
      ansible.builtin.copy:
        src: /root/.ssh/authorized_keys
        dest: /home/{{ user2 }}/.ssh/authorized_keys
        owner: "{{ user2 }}"
        group: "{{ user2 }}"
        mode: "0600"
        remote_src: yes

    - name: Change SSH port to custom port
      ansible.builtin.lineinfile:
        path: /etc/ssh/sshd_config
        regexp: "^#?Port"
        line: "Port {{ ssh_port }}"
        backup: yes

    - name: Disable password authentication
      ansible.builtin.lineinfile:
        path: /etc/ssh/sshd_config
        regexp: "^#?PasswordAuthentication"
        line: "PasswordAuthentication no"

    - name: Disable root login
      ansible.builtin.lineinfile:
        path: /etc/ssh/sshd_config
        regexp: "^#?PermitRootLogin"
        line: "PermitRootLogin no"

    - name: Enable PAM
      ansible.builtin.lineinfile:
        path: /etc/ssh/sshd_config
        regexp: "^#?UsePAM"
        line: "UsePAM yes"

    - name: Enable public key auth
      ansible.builtin.lineinfile:
        path: /etc/ssh/sshd_config
        regexp: "^#?PubkeyAuthentication"
        line: "PubkeyAuthentication yes"

    - name: Set authorized_keys path
      ansible.builtin.lineinfile:
        path: /etc/ssh/sshd_config
        regexp: "^#?AuthorizedKeysFile"
        line: "AuthorizedKeysFile .ssh/authorized_keys"

    - name: Validate SSH config
      ansible.builtin.command: sshd -t

    - name: Reload SSH service
      ansible.builtin.systemd:
        name: ssh
        state: restarted

    # --- STARSHIP --- #
    - name: Download Starship installation script
      ansible.builtin.get_url:
        url: https://starship.rs/install.sh
        dest: /tmp/starship-install.sh
        mode: "0755"

    - name: Install Starship
      ansible.builtin.shell: /tmp/starship-install.sh --yes
      args:
        creates: /usr/local/bin/starship

    - name: Add Starship to Bash profiles for all users
      ansible.builtin.blockinfile:
        path: /etc/profile.d/starship.sh
        create: yes
        mode: "0755"
        block: |
          # Init Starship
          if command -v starship >/dev/null 2>&1; then
            eval "$(starship init bash)"
          fi

    - name: Remove Starship install script
      ansible.builtin.file:
        path: /tmp/starship-install.sh
        state: absent

    # --- HELIX --- #
    - name: Add Helix PPA
      ansible.builtin.apt_repository:
        repo: ppa:maveonair/helix-editor
        state: present

    - name: Install Helix
      ansible.builtin.apt:
        name: helix
        state: present
        update_cache: yes

    # --- YAZI --- #
    - name: Download Yazi snap
      ansible.builtin.get_url:
        url: "https://github.com/sxyazi/yazi/releases/download/v25.5.31/yazi-amd64.snap"
        dest: /tmp/yazi-amd64.snap
        mode: "0644"

    - name: Install snapd if not present
      ansible.builtin.apt:
        name: snapd
        state: present
        update_cache: yes

    - name: Install Yazi via snap
      ansible.builtin.command: snap install /tmp/yazi-amd64.snap --classic --dangerous
      args:
        creates: /snap/bin/yazi

    - name: Verify Yazi installation
      ansible.builtin.command: yazi --version
      register: yazi_version
      changed_when: false

    - name: Display Yazi version
      ansible.builtin.debug:
        msg: "Yazi version installed: {{ yazi_version.stdout }}"

    - name: Remove Yazi snap file
      ansible.builtin.file:
        path: /tmp/yazi-amd64.snap
        state: absent

    # --- Docker --- #
    - name: Create directory for Docker GPG key
      ansible.builtin.file:
        path: /etc/apt/keyrings
        state: directory
        mode: "0755"

    - name: Download Docker GPG key
      ansible.builtin.get_url:
        url: https://download.docker.com/linux/ubuntu/gpg
        dest: /tmp/docker.gpg
        mode: "0644"

    - name: Add Docker GPG key
      ansible.builtin.shell: |
        gpg --dearmor < /tmp/docker.gpg > /etc/apt/keyrings/docker.gpg
        chmod 644 /etc/apt/keyrings/docker.gpg
      args:
        creates: /etc/apt/keyrings/docker.gpg

    - name: Add Docker repository
      ansible.builtin.apt_repository:
        repo: "deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu {{ ansible_facts['lsb']['codename'] }} stable"
        state: present
        filename: docker

    - name: Install Docker packages
      ansible.builtin.apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: present
        update_cache: yes
        lock_timeout: 300
      register: apt_docker
      retries: 3
      delay: 10
      until: apt_docker is succeeded

    - name: Start and enable Docker service
      ansible.builtin.systemd:
        name: docker
        state: started
        enabled: yes

    - name: Add user1 to docker group
      ansible.builtin.user:
        name: "{{ user1 }}"
        groups: docker
        append: yes

    - name: Add user2 to docker group
      ansible.builtin.user:
        name: "{{ user2 }}"
        groups: docker
        append: yes

    # --- Docker Compose per user --- #
    - name: Gather UID/GID for user1
      ansible.builtin.getent:
        database: passwd
        key: "{{ user1 }}"
      register: user1_info

    - name: Gather UID/GID for user2
      ansible.builtin.getent:
        database: passwd
        key: "{{ user2 }}"
      register: user2_info

    - name: Build users_list with UID/GID
      set_fact:
        users_list:
          - name: "{{ user1 }}"
            port: 3001
            uid: "{{ user1_info.ansible_facts.getent_passwd[user1][1] }}"
            gid: "{{ user1_info.ansible_facts.getent_passwd[user1][2] }}"
          - name: "{{ user2 }}"
            port: 3000
            uid: "{{ user2_info.ansible_facts.getent_passwd[user2][1] }}"
            gid: "{{ user2_info.ansible_facts.getent_passwd[user2][2] }}"

    - name: Create compose.yml per user
      ansible.builtin.template:
        src: ../vsc-server/compose.yml.j2
        dest: "/home/{{ item.name }}/compose.yml"
        owner: "{{ item.name }}"
        group: "{{ item.name }}"
        mode: "0644"
      loop: "{{ users_list }}"

    # --- GO INSTALLATION --- #
    - name: Install Go via apt
      ansible.builtin.apt:
        name: golang-go
        state: present
        update_cache: yes

    - name: Create Go workspace directories for {{ user1 }}
      ansible.builtin.file:
        path: "/home/{{ user1 }}/go/{{ item }}"
        state: directory
        owner: "{{ user1 }}"
        group: "{{ user1 }}"
        mode: "0755"
      loop:
        - bin
        - src
        - pkg

    - name: Create Go workspace directories for {{ user2 }}
      ansible.builtin.file:
        path: "/home/{{ user2 }}/go/{{ item }}"
        state: directory
        owner: "{{ user2 }}"
        group: "{{ user2 }}"
        mode: "0755"
      loop:
        - bin
        - src
        - pkg

    - name: Install Go tools globally
      ansible.builtin.shell: |
        export GOPATH=/opt/go
        export GOBIN=/usr/local/bin
        go install golang.org/x/tools/gopls@latest
        go install github.com/go-delve/delve/cmd/dlv@latest
        go install golang.org/x/tools/cmd/goimports@latest
      args:
        creates: "/usr/local/bin/gopls"

    - name: Add user Go bin to PATH in bashrc for {{ user1 }}
      ansible.builtin.lineinfile:
        path: "/home/{{ user1 }}/.bashrc"
        line: "export PATH=$PATH:$HOME/go/bin"
        create: yes
        owner: "{{ user1 }}"
        group: "{{ user1 }}"

    - name: Add user Go bin to PATH in bashrc for {{ user2 }}
      ansible.builtin.lineinfile:
        path: "/home/{{ user2 }}/.bashrc"
        line: "export PATH=$PATH:$HOME/go/bin"
        create: yes
        owner: "{{ user2 }}"
        group: "{{ user2 }}"

    # --- ROOTFS SETUP --- #
    - name: Create rootfs images directory
      ansible.builtin.file:
        path: "/var/lib/mrunc/images/"
        state: directory
        owner: root
        group: root
        mode: "0755"

    - name: Install debootstrap for creating rootfs
      ansible.builtin.apt:
        name: debootstrap
        state: present
        update_cache: yes

    - name: Download Ubuntu 24.04 base rootfs
      ansible.builtin.get_url:
        url: "https://cloud-images.ubuntu.com/minimal/releases/noble/release/ubuntu-24.04-minimal-cloudimg-amd64-root.tar.xz"
        dest: "/tmp/ubuntu-22.04-rootfs.tar.xz"
        mode: "0644"
        timeout: 300
      register: ubuntu_download
      retries: 3
      delay: 30
      until: ubuntu_download is succeeded

    - name: Create Ubuntu rootfs directory
      ansible.builtin.file:
        path: "/var/lib/mrunc/images/ubuntu"
        state: directory
        owner: root
        group: root
        mode: "0755"

    - name: Extract Ubuntu rootfs
      ansible.builtin.unarchive:
        src: "/tmp/ubuntu-22.04-rootfs.tar.xz"
        dest: "/var/lib/mrunc/images/ubuntu"
        remote_src: yes
        owner: root
        group: root
        creates: "/var/lib/mrunc/images/ubuntu/etc/os-release"

    - name: Verify Ubuntu rootfs extraction
      ansible.builtin.stat:
        path: "/var/lib/mrunc/images/ubuntu/etc/os-release"
      register: ubuntu_rootfs_check

    - name: Display rootfs verification status
      ansible.builtin.debug:
        msg: "Ubuntu rootfs extracted successfully: {{ ubuntu_rootfs_check.stat.exists }}"

    - name: Remove downloaded tar file
      ansible.builtin.file:
        path: "/tmp/ubuntu-22.04-rootfs.tar.xz"
        state: absent
